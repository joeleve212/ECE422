//************************************************************************
// TASKS.C
// Task Functions and Definitions
//
//  <DESCRIPTION>
//
// <NAME>
// <DATE>   <VERSION>
// <PURPOSE>
//
//************************************************************************
// Requires the following External Functions
//************************************************************************
// None

//************************************************************************
// Includes
//************************************************************************
#include <msp430fr6989.h>   // Register Definitions
#include <TASKS.h>           // TASKS Definitions

//************************************************************************
// Function Prototypes
//************************************************************************
int InitTasks(void);
int Task0(void);
int Task1(void);

//************************************************************************
// Function Definitions

int InitTasks(void){
    WDTCTL = 0x5A80;    // stop watchdog timer
    PM5CTL0 = 0xFFFE;           // enable I/O

    NumTasks = 2;       // User can set the total number of Tasks with this variable

    // initialize addresses of task Stacks
    TaskPointers[0] = &Task0Stack[15];
    TaskPointers[1] = &Task1Stack[15];
    TaskPointers[2] = &Task2Stack[15];
    TaskPointers[3] = &Task3Stack[15];
    TaskPointers[4] = &Task4Stack[15];

    // Initialize Task0Stack
    Task0Stack[1] = Task0;      // Task0 PC (initial starting address of Task0)
    Task0Stack[2] = 0x0008;     // Task0 SR (initial Status Register - only GIE bit set)

    // Initialize Task1Stack
    Task1Stack[1] = Task1;      // Task1 PC (initial starting address of Task1)
    Task1Stack[2] = 0x0008;     // Task1 SR (initial Status Register - only GIE bit set)

    return 0;
}//end InitTasks()

//************************************************************************
// Task0 - simple test program to blink the Red LED
//         Requires the TA1 Timer and P1.0
//         Note there is an initialization section and then an
//          infinite loop with the Tasks main logic
//************************************************************************
int Task0(void){
    // initialization Section
    unsigned char count = 0;

    P1DIR |= BIT0;
    P1OUT &= ~BIT0;

    TA1CCR0 = 32768;
    TA1CTL = 0x0114;    // start TA1 from 0 using ACLK in UP mode

    // Infinite Loop with main Task logic
    while(1){
        if (TA1CTL & BIT0){
            TA1CTL &= ~BIT0;
            P1OUT ^= BIT0;
            count++;
        }//end if

        if (count >= 6){
            count = 0;
        }
    }//end while(1)

    return 0;
}//end Task0()

//************************************************************************
// Task1 - simple test program to blink the green LED
//         Requires the TA2 Timer and P9.7
//         Note there is an initialization section and then an
//          infinite loop with the Tasks main logic
//************************************************************************
int Task1(void){
    // initialization Section
    unsigned char count = 0;

    P9DIR |= BIT7;
    P9OUT &= ~BIT7;

    TA2CCR0 = 15000;
    TA2CTL = 0x0114;    // start TA2 from 0 using ACLK in UP mode

    // Infinite Loop with main Task logic
    while(1){
        if (TA2CTL & BIT0){
            TA2CTL &= ~BIT0;
            P9OUT ^= BIT7;
            count++;
        }//end if

        if (count >= 6){
            count = 0;
        }
    }//end while(1)

    return 0;
}//end Task1()

